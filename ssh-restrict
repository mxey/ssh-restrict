#!/usr/bin/env python

import shlex
import sys

import os
import re

# import for python 2 and python 3
try:
    import ConfigParser as configparser
except ImportError:
    import configparser

RETURN_CODE_WRONG_USAGE = 3
RETURN_CODE_COMMAND_NOT_FOUND = 3
RETURN_CODE_INTERNAL_ERROR = 3

CONFIG_SECTION_NAME_COMMANDS = "commands"

buffer_exception_uncritical = []

def alert(message):
    sys.stderr.write(message + "\n")

def match_command(pattern, command):
    # noinspection PyBroadException
    try:
        return re.match("^" + pattern + "$", command)
    except:
        # noinspection PyBroadException
        try:
            if shlex.split(command)[0] == shlex.split(pattern)[0]:
                alert( \
                    "ssh-restrict: failed to evaluate regex '%s' for command '%s': %s" % \
                    (pattern, command, sys.exc_info()[1]) \
                )
                sys.exit(RETURN_CODE_INTERNAL_ERROR)
        except:
            buffer_exception_uncritical.append(
                "ssh-restrict: config analyzer failed for command definition '%s': %s" %
                (pattern, sys.exc_info()[1])
            )


def get_formatted_command_parts(command_template, command_match):
    # noinspection PyBroadException
    try:
        return shlex.split(command_template.format(*command_match.groups()))
    except:
        alert("ssh-restrict: formatting command '%s' failed: %s" % \
            (command_template, sys.exc_info()[1])
        )
        sys.exit(RETURN_CODE_INTERNAL_ERROR)


if len(sys.argv) != 2:
    alert("Usage: ssh-restrict CONFIG")
    sys.exit(RETURN_CODE_WRONG_USAGE)

try:
    original_command = os.environ["SSH_ORIGINAL_COMMAND"]
except KeyError:
    alert("ssh-restrict: $SSH_ORIGINAL_COMMAND is not set")
    sys.exit(RETURN_CODE_WRONG_USAGE)

config = configparser.RawConfigParser()
# Override `optionxform` to bypass conversion of keys to lowercase
config.optionxform = lambda option: option
config.readfp(open(sys.argv[1]))

for config_pattern, config_command in config.items(CONFIG_SECTION_NAME_COMMANDS):
    match_results = match_command(config_pattern, original_command)
    if match_results:
        command_parts = get_formatted_command_parts(config_command, match_results)
        try:
            os.execvp(command_parts[0], command_parts)
        except OSError:
            alert("ssh-restrict: command not found: %s" % command_parts[0])
            sys.exit(RETURN_CODE_COMMAND_NOT_FOUND)
else:
    alert("ssh-restrict: command not defined: %s" % original_command)
    if len(buffer_exception_uncritical) > 0:
        alert("\n".join(buffer_exception_uncritical))
        sys.exit(RETURN_CODE_INTERNAL_ERROR)
    sys.exit(RETURN_CODE_WRONG_USAGE)
